
name: Build and Deploy to ACK

on:
  pull_request:
  push:
    branches:
      - dev
    tags:
      - 'v1.*'
      - 'v0.*'

# Environment variables available to all jobs and steps in this workflow.
env:
  REGISTRY: crpi-84lajww1vwmf2e1i.cn-hangzhou.personal.cr.aliyuncs.com # 阿里云的凭证
  NAMESPACE: blueskyf # 命名空间
  IMAGE: minecraft # 镜像名
  TAG: ${{ github.sha }}

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      if: github.event_name == 'pull_request'
      uses: actions/checkout@v4
      with:
        ref: 'dev'

    # 1.1 Login to ACR
    - name: Login to ACR with the AccessKey pair
      if: github.event_name == 'pull_request'
      uses: aliyun/acr-login@v1
      with:
        login-server: "${{ env.REGISTRY }}"
        username: "${{ secrets.REGISTRY_USERNAME }}"
        password: "${{ secrets.REGISTRY_PASSWORD }}"

    # 1.2 Build and push image to ACR
    - name: Build and push image to ACR
      if: github.event_name == 'pull_request'
      run: |
        docker build --tag "$REGISTRY/$NAMESPACE/$IMAGE:$TAG" .
        docker push "$REGISTRY/$NAMESPACE/$IMAGE:$TAG"

    # 1.3 Scan image in ACR
    - name: Scan image in ACR
      if: github.event_name == 'pull_request'
      uses: aliyun/acr-scan@v1
      with:
        region-id: "cn-hangzhou"
        access-key-id: "${{ secrets.ACCESS_KEY_ID }}"
        access-key-secret: "${{ secrets.ACCESS_KEY_SECRET }}"
        repository: "${{ env.NAMESPACE }}/${{ env.IMAGE }}"
        tag: "${{ env.TAG }}"

    - name: Deploy to ECS via SSH
      if: github.event_name == 'push'
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.ECS_HOST }}
        username: ${{ secrets.ECS_USERNAME }}
        password: ${{ secrets.ECS_PASSWORD }}
        script: |
          # 登录阿里云ACR
          docker login -u ${{ secrets.REGISTRY_USERNAME }} ${{ env.REGISTRY }} -p ${{ secrets.REGISTRY_PASSWORD }}
          
          # 拉取最新镜像
          docker pull ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE }}:${{ env.TAG }}
          
          # 停止并删除旧容器
          docker stop minecraft-server || true
          docker rm minecraft-server || true
          
          # 运行新容器（带持久化数据卷）
          docker run -d \
            --name minecraft-server \
            -p 25565:25565 \
            -v /minecraft-data:/data \
            ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE }}:${{ env.TAG }}
          
          # 清理旧镜像
          docker image prune -af
